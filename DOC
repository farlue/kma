
Basic buddy:

  1. We found that the time cost of updating the bitmap is crucial to the total performance, so we specifically optimized this function, using pre-set masks and memset().
  2. To minimize the number of pages that are occupied simultaneously, and thus increase space efficiency, pages are freed once they are empty.
  3. The free lists are doubly linked lists, which enables fast insertion and removal.
  4. To round up a requested malloc size fast, our get_roundup() function uses mostly bit operation.

Lazy buddy:

  1. Lazy buddy is faster than basic buddy, since it updates bitmap less frequently and coalesces only when necessary.
  2. Lazy buddy puts delayed buffers in the front of free lists, therefore a delayed buddy buffer can be found quickly for accelerated coalescing.

Power-of-two Free List:
The power-of-two free lists method uses a set of free lists. Each list stores buffers of a particular size, and all sizes are power of two. Each buffer has a one-world header, which reduces the usable are by one world. When the buffer is free, the header stores the pointer to the next buffer in the free list. When the buffer is allocated, the headers stores pointer to the associated free list. This algorithm is relatively simple and fast. It avoids the linear searches of the resource map method and eliminates the fragmentation problem. In situations where a buffer is available, its worst-case performance is well bounded.
There are some important drawbacks of this algorithm. The rounding up operation for each request often leaves a lot of unused space in the buffer, which may result in poor utilization. There is no provision for coalescing adjacent free buffers to satisfy larger request. The size of the buffer remains fixed for its life. The only flexibility is that large buffer may sometimes be used for small requests.
In our implementation, we use some MACRO operations to calculate the index and size for each request. We also copy the freelist to the current page header thereby reducing the search time. Every time there is a free operation, we check if all buffers in the kernel are free or not. If they are, we free all pages in the kernel. We also found that, if we could free the page more effcient, like every time all buffers in a page are availabe, we free that page, the inefficiency penalty will be much smaller. Since the Mckusick-Karels algorithm is an improved power-of-two allocator, we implement it with a similar approach. It has more advantages than the power-of-two method. It is faster, waste less memory.

